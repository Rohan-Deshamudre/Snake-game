import com.github.spotbugs.SpotBugsTask

plugins {
    id 'java'
//    id 'eclipse' // optional (to generate Eclipse project files)
//    id 'idea' // optional (to generate IntelliJ IDEA project files)
    id 'application'
    // Test coverage
    id 'jacoco'

    // Code style
    id 'checkstyle'

    // PMD
    id 'pmd'

    // FindBugs / SpotBugs
    id "com.github.spotbugs" version "3.0.0"

    // Lombok
    id "io.freefair.lombok" version "4.1.4"

    // JavaFX
    id 'org.openjfx.javafxplugin' version '0.0.8'
}

group 'nl.tudelft.cse.sem.1'
version '1.0-SNAPSHOT'

sourceCompatibility = 12

repositories {
    mavenCentral()
}

test {
    useJUnitPlatform()

    jacoco {
        enabled = true
        excludes = [
                'gui.MainRunner.java'
        ]
    }

    finalizedBy jacocoTestReport
}

dependencies { testCompile "org.mockito:mockito-core:2.+" }

dependencies {
    testImplementation('org.junit.jupiter:junit-jupiter:5.5.2')
    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.7.1'
    // https://mvnrepository.com/artifact/mysql/mysql-connector-java
    testCompile "org.mockito:mockito-core:2.+"
    compile group: 'mysql', name: 'mysql-connector-java', version: '8.0.18'
}


jacocoTestCoverageVerification {
    //To exclude: add "classname.*" (class) or "classname.methodname(parameters with types)" (methods) to the excludes arrays
    violationRules {
        rule {
            element = 'METHOD'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.8
            }
            excludes = [
                'game.GameSettings.*', // just constants
                'game.SnakeApp.*', // only used for going to game screen directly
                'game.Painter.*', // uses final class so needs to use PowerMock
                // TODO: Figure out how to test this
                'game.Game.lambda$setOnKeyPressedListener$1(javafx.scene.input.KeyEvent)',
                'game.Game.lambda$gameLoop$0()', //TODO Is this testable?
                'game.Game.stop()', //Impossible to test system.exit (which will get replaced after the prototype)
                'game.Sound.closeClip()', // Impossible to test static.
                'gui.Gui.*',
                'gui.AlertBox.*',
                'gui.MainRunner.*',
                'gui.controller.ScoreController.*', //delete this when the implementation and test is ready
                'game.Game.createFruit()', // uses random element which is hard and unnecessary to test
                'gui.controller.EntryController.quitButton()', //impossible to test System.exit
                'gui.controller.LeaderBoardController.quitButton()', //impossible to test System.exit
                    'game.Sound.*' //uses static class

            ]
        }
        rule {
            element = 'METHOD'
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.7
            }
            excludes = [
                    'game.GameSettings.*', // just constants
                    'game.SnakeApp.*', // only used for going to game screen directly during development
                    'game.Painter.*', // uses final class so needs to use PowerMock
                    'game.Game.lambda$setOnKeyPressedListener$1(javafx.scene.input.KeyEvent)', //private method
                    'game.Game.lambda$gameLoop$0()', //TODO Is this testable?
                    'game.Game.stop()', //Impossible to test system.exit (which will get replaced after the prototype)
                    'game.Sound.closeClip()', // Impossible to test static.
                    'gui.Gui.*',
                    'gui.AlertBox.*',
                    'gui.MainRunner.*',
                    'gui.controller.ScoreController.*', //delete this when implementation and test is ready
                    'game.Game.createFruit()', // uses random element which is hard and unnecessary to test
                    'gui.controller.EntryController.quitButton()', //impossible to test System.exit
                    'gui.controller.LeaderBoardController.quitButton()', //impossible to test System.exit
                    'game.Sound.*' //uses static class
            ]
        }

    }
}

check.dependsOn jacocoTestCoverageVerification

checkstyle {
    ignoreFailures = false
    maxWarnings = 5
    toolVersion "8.25"
	configFile = rootProject.file('config/checkstyle/checkstyle.xml')
}

pmd {
    incrementalAnalysis = true
    toolVersion "6.20.0"
    ruleSets = []
    ruleSetFiles = files("config/pmd/ruleset.xml")
}

spotbugs {
    sourceSets = [sourceSets.main]
    ignoreFailures = false
    effort = "default"
    reportLevel = "high"
    visitors = ["FindSqlInjection", "SwitchFallthrough"]
    excludeFilter = file("$rootProject.projectDir/config/spotbugs/excludeFilter.xml")
}

tasks.withType(SpotBugsTask) {
    reports.xml.enabled = false
    reports.html.enabled = true
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

javafx {
    version = "12"
    modules = [ 'javafx.controls', 'javafx.fxml' ]
}

mainClassName = 'gui.MainRunner'

//uncomment this if you want to run SnakeApp (testing purpose)
//mainClassName='game.SnakeApp'